install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("devtools")
require(devtools)
install_github("rCharts", "ramnathv")
install_github("rCharts", "ramnathv")
require(devtools)
require(rCharts)
require(devTools)
install.packages("devTools")
install.packages("devtools")
require(devtools)
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
install.packages("Googlevis")
install.packages("GoogleVis")
install.packages("googleVis")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava')
install.packages('rJava', repos='http://www.rforge.net/')
require(tm); require(SnowballC); require(data.table); library(RWeka)
R.Version()
install.packages('rJava', repos='http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
.libPaths()[1]
.libPaths()[2]
.libPaths()
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
set JAVA_HOME="C:\Program Files\Java\jre7\"
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7\\")
options(java.home="C:\\Program Files\\Java\\jre7\\")
library(rJava)
require(tm); require(SnowballC); require(data.table); library("RWeka")
gc()
gc()
driver <-1
trip <- 1
files <- paste0(path, driver, '/', trip, ".csv")
path <- "data/drivers/"
files <- paste0(path, driver, '/', trip, ".csv")
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
require(caret);require(data.table)
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
files
fread(files, header=T, sep="," ,stringsAsFactor=F)
setwd('H:/Machine_Learning/bike-sharing-data-mining/')
rm(list=ls());gc()
require(lubridate);require(caret)
# preprocessing
train <- read.csv('Data/train.csv', head=T, stringsAsFactor=F)
test <- read.csv('Data/test.csv', head=T, stringsAsFactor=F)
train$hour <- hour(train$datetime)
test$hour <- hour(test$datetime)
train$wd <- wday(train$datetime)
test$wd <- wday(test$datetime)
test$count <- 0
head(test);head(train)
train$season <- as.factor(train$season)
train$holiday <- as.factor(train$holiday)
train$workingday <- as.factor(train$workingday)
train$weather <- as.factor(train$weather)
train$hour <- as.factor(train$hour)
train$wd <- as.factor(train$wd)
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
test$hour <- as.factor(test$hour)
test$wd <- as.factor(test$wd)
feature_count <- colnames(train[,-c(1,9,10)])
feature_count
feature_count <- colnames(train[,-c(1,10,11)])
feature_count
feature_casual <- colnames(train[,-c(1,12,11)])
feature_registered <- colnames(train[,-c(1,10,12)])
feature_casual
feature_registered
set.seed(888)
fitControl <- trainControl(method = "adaptive_cv",number = 10,repeats = 5,classProbs = TRUE,
summaryFunction = defaultSummary,adaptive = list(min = 12,alpha = 0.05,method = "gls",complete = TRUE))
fitControl <- trainControl(method = "adaptive_cv",number = 10,repeats = 5,classProbs = TRUE,
summaryFunction = defaultSummary,adaptive = list(min = 8,alpha = 0.05,method = "gls",complete = TRUE))
# Grid <-  expand.grid()
g <- train(count ~ ., data=train[,feature_count], method='rf', trControl = fitControl, verbose=T, metric = "RMSE", tuneLength=8)
#tuneGrid = Grid)
g
pred <- predict(g, train)
confusionMatrix(pred, as.integer(train$count))
as.integer(train$count)
length(as.integer(train$count))
length(pred)
confusionMatrix(pred, as.integer(train$count))
confusionMatrix(pred, as.factor(train$count))
pred
confusionMatrix(as.integer(pred), as.integer(train$count))
as.integer(pred)
res <- predict(g,test)
res
head(test)
