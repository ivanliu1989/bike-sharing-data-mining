i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
data_list<-c(data_list,filename2)
my_data <- rbind(my_data,read.csv(filename2))
}
print(my_data)
}
pollutantmean("specdata",,1:5)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2))
}
my_mean <- mean(my_data$pollutant,na.rm = TRUE)
print(my_mean)
}
pollutantmean("specdata",,1:5)
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
my_mean <- mean(my_data$pollutant,na.rm = TRUE)
print(my_mean)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(colnames(my_data))
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(my_data$pollutant)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(my_data[,pollutant])
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
my_mean <- mean(my_data[,pollutant],na.rm = TRUE)
print(my_mean)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","nitrate",23)
My first R Markdown File
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("week2quiz","6614a43b7641be7a6666")
myapp <- oauth_app("github","6614a43b7641be7a6666")
myapp <- oauth_app("github","6614a43b7641be7a6666")
myapp <- oauth_app("github","56b637a5baffac62cad9")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth_app
myapp <- oauth_app("week2quiz", "67926c344faef2ea1e88083564fb60df94109452")
myapp <- oauth_app("week2quiz", "67926c344faef2ea1e88083564fb60df94109452")
github_token <- oauth2.0_token(oauth_endpoints("week2quiz"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages(c("Formula", "gplots", "gtools", "markdown", "mboost", "mime", "multcomp", "mvoutlier", "party", "randomForest", "rattle", "Rcpp", "RCurl", "rgl", "RGtk2", "rjson", "sandwich", "sem", "swirl", "tm", "vcd", "wordcloud", "XLConnect", "xlsx"))
require(shiny)
runExample("01_Hello")
library(RODBC)
?odbcConnect
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
channel <- odbcDriverConnect("")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
library(RODBC)
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
sqlTables();
?RODBC
da <- sqlQuery(myconn, "select top 5 * from dbo.train")
da
da <- sqlQuery(myconn, "select top 5 * from criteo-kaggle.train")
da
da <- sqlQuery(myconn, "select top 5 * from Criteo-Kaggle.train")
da
library(sqldf)
criteo.data <- sqlFetch(myconn, "Criteo-Kaggle")
criteo.data <- sqlFetch(myconn, Criteo-Kaggle)
criteo.data <- sqlFetch(myconn, "AdventureWorks2012")
criteo.data <- sqlFetch(myconn, "Criteo-Kaggle.train")
criteo.data <- sqlFetch(myconn, "train")
sqlTables(myconn)
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn
sqlTables(myconn)
?sqlFetch
criteo.data <- sqlFetch(myconn, "MSreplication_options")
criteo.data
da <- sqlQuery(criteo.data, "select top 5 * from MSreplication_options")
da <- sqlQuery(myconn, "select top 5 * from MSreplication_options")
da
myconn <- odbcConnect("IVAN_LIU.AdventureWorks2012","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
close(myconn)
install.packages("snowfall")
require(snowfall)
sfInit (parallel=T, cpus=4)
result <- sfLapply(1:10,log)
result
sfStop()
sfCpus()
sfClusterEvalQ(ls())
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400, region = "150"))
print(G2, "chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line, "chart")
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
#convert to data.frame so souce and target can be character and value numeric
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
#now we finally have the data in the form we need
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
#now we finally have the data in the form we need
links$target
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
require(rjson)
sankeyPlot <- rCharts$new()
sankeyPlot
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
nodes <- unlist(
nodes
#in form of source, target, value
links
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
links
sankeyPlot <- rCharts$new()
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
library(plotly)
intall.packages("plotly")
install_github("ropensci/plotly")
library("devtools")
install_github("ropensci/plotly")
library(plotly)
p <- plotly(username='R-Demo-Account', key='yu680v5eii')
trace1 <- list(
x = c(1, 2, 3, 4, 5),
y = c(1, 3, 2, 3, 1),
mode = "lines+markers",
name = "'linear'",
line = list(shape = "linear"),
type = "scatter"
)
trace1
trace2 <- list(
x = c(1, 2, 3, 4, 5),
y = c(6, 8, 7, 8, 6),
mode = "lines+markers",
name = "'spline'",
text = c("tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object", "tweak line smoothness<br>with 'smoothing' in line object"),
line = list(shape = "spline"),
type = "scatter"
)
trace3 <- list(
x = c(1, 2, 3, 4, 5),
y = c(11, 13, 12, 13, 11),
mode = "lines+markers",
name = "'vhv'",
line = list(shape = "vhv"),
type = "scatter"
)
trace4 <- list(
x = c(1, 2, 3, 4, 5),
y = c(16, 18, 17, 18, 16),
mode = "lines+markers",
name = "'hvh'",
line = list(shape = "hvh"),
type = "scatter"
)
trace5 <- list(
x = c(1, 2, 3, 4, 5),
y = c(21, 23, 22, 23, 21),
mode = "lines+markers",
name = "'vh'",
line = list(shape = "vh"),
type = "scatter"
)
trace6 <- list(
x = c(1, 2, 3, 4, 5),
y = c(26, 28, 27, 28, 26),
mode = "lines+markers",
name = "'hv'",
line = list(shape = "hv"),
type = "scatter"
)
data <- list(trace1, trace2, trace3, trace4, trace5, trace6)
daa
data
layout <- list(legend = list(
y = 0.5,
traceorder = "reversed",
font = list(size = 16),
yref = "paper"
))
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
p <- plotly(username='ivanliu1989', key='clouds123')
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
set_credentials_file("ivanliu1989", "i4quiodbde")
response <- p$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
py <- plotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
r <- py$ggplotly(ggiris)
r$response$url
trace0 <- list(
x = c(1, 2, 3, 4),
y = c(10, 15, 13, 17)
)
trace1 <- list(
x = c(1, 2, 3, 4),
y = c(16, 5, 11, 9)
)
response <- py$plotly(trace0, trace1, kwargs=list(filename="basic-line", fileopt="overwrite"))
response$url
response <- py$plotly(data, kwargs=list(layout=layout, filename="line-shapes", fileopt="overwrite"))
url <- response$url
filename <- response$filename
url
filename
response$url
py$response$url
py$response
install.packages(c("car", "effects", "multcomp", "NLP", "party", "robCompositions", "XLConnect", "XLConnectJars"))
shiny::runApp('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/shiny_app_pricing_management')
shinyapps::setAccountInfo(name='ivanliu1989', token='1E877F87A6C2DCCF5DE964D73F4875BE', secret='9srUXMP3o8jChzSaz9gMofZsoFn6a4HgxExyKyb1')
require(shinyapps)
deployApp()
data <- iris[,c(1,2,5)]
data(iris)
data <- iris[,c(1,2,5)]
data$Species <- factor(ifelse(data$Speices == 'setosa','rare','common'))
data$Species <- factor(ifelse(data$Species == 'setosa','rare','common'))
newData <- SMOTE(Species~.,data,perc.over=600)
require(DMwR)
data$Species
newData <- SMOTE(Species~.,data,perc.over=600)
table(newData$Species)
table(data$Species)
setwd(choose.dir())
train <- read.csv('/Data/train.csv', head=F)
train <- read.csv('Data/train.csv', head=F)
head(train)
train <- read.csv('Data/train.csv', head=T)
test <- read.csv('Data/test.csv', head=T)
str(train)
train <- read.csv('Data/train.csv', head=T, stringsAsFactor=F)
test <- read.csv('Data/test.csv', head=T, stringsAsFactor=F)
str(train)
plot(x=train[,1], y=train$count)
plot(x=train[,2], y=train$count)
plot(x=train[,3], y=train$count)
plot(x=train[,4], y=train$count)
str(test)
library(lubridate)
install.packages("lubridate")
require(lubridate)
require(randomforest)
require(randomForest)
train$hour <- hour(train$hour)
train$hour <- hour(train$datetime)
test$hour <- hour(train$datetime)
test$hour <- hour(test$datetime)
head(train)
train$wd <- wday(train$datetime)
test$wd <- wday(train$datetime)
test$wd <- wday(test$datetime)
test$count <- 0
fit <- randomForest(as.factor(count) ~ season + holiday + weather + dow+ hour + temp + atemp
+ humidity + windspeed , data=train, ntree = 700, importance=TRUE)
fit <- randomForest(as.factor(count) ~ season + holiday + weather + wd+ hour + temp + atemp
+ humidity + windspeed , data=train, ntree = 700, importance=TRUE)
varImpPlot(fit)
varImpPlot(fit)
pred <- predict(fit, test)
fit <- randomForest(as.factor(count) ~ season + holiday + weather + wd+ hour + temp + atemp
+ humidity + windspeed , data=train, ntree = 700, importance=TRUE)
varImpPlot(fit)
pred <- predict(fit, test)
submit <- data.frame(datetime=test$datetime, count=pred)
write.csv(submit, file='rf.csv',row.names=F)
png('rf.png')
varImpPlot(fit)
dev.off()
rmsle(train$count, pred)
fit <- randomForest(count ~ season + holiday + weather + wd+ hour + temp + atemp
+ humidity + windspeed , data=train, ntree = 700, importance=TRUE)
install.packages('Metrics')
require(Metrics)
setwd(choose.dir())
train <- read.csv('Data/train.csv', head=T, stringsAsFactor=F)
require(caret)
install.packages(caret)
install.packages("caret")
str(train)
descrCor <- cor(train)
descrCor <- cor(train[,-1])
highCorr <- sum(abs(descrCor[upper.tri(descrCor)])>0.999)
plot(descrCor)
summary(descrCor)
